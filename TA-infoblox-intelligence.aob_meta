{"data_input_builder": {"datainputs": [{"use_external_validation": true, "sourcetype": "infoblox:threatintelligence:domains", "parameters": [{"type": "dropdownlist", "label": "Profile", "placeholder": "", "possible_values": [{"value": "IID", "label": "IID"}], "required": true, "value": "IID", "format_type": "dropdownlist", "default_value": "IID", "help_string": "", "name": "profile"}], "interval": "3600", "index": "default", "title": "Infoblox threat intelligence domains", "streaming_mode_xml": true, "type": "customized", "uuid": "be1e5991253140d48aab5e8fa4e31b35", "data_inputs_options": [{"title": "Profile", "type": "customized_var", "placeholder": "", "required_on_edit": false, "possible_values": [{"value": "IID", "label": "IID"}], "description": "", "format_type": "dropdownlist", "default_value": "IID", "required_on_create": true, "name": "profile"}], "code": "import os\nimport sys\nimport time\nimport datetime\nimport json\nimport base64\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # profile = definition.parameters.get('profile', None)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\n    \"\"\"\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_profile = helper.get_arg('profile')\n    interval = helper.get_arg('interval')\n    \n    helper.set_log_level(\"debug\")\n    helper.log_debug(\"Interval is \" + str(interval))\n    # In single instance mode, to get arguments of a particular input, use\n    # opt_profile = helper.get_arg('profile', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    #helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    # helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    # helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    # account = helper.get_user_credential_by_username(\"username\")\n    # account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_apikey = helper.get_global_setting(\"apikey\")\n    \n\n    # The following examples show usage of logging related helper functions.\n    #helper.set_log_level(\"info\")\n    # write to the log for this modular input using configured global log level or INFO as default\n    # helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_info(\"Start download for Infoblox Threatlist\")\n\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    \n    \n    url = \"https://platform.activetrust.net:8000/api/data/threats/host?data_format=json\"\n    \n   # if opt_profile and not opt_profile.isspace():\n   #     url = url + \"&profile=\" + opt_profile\n    if interval:\n        period = int(interval)/3600\n        url = url + \"&period=\" + str(period) + \"%20hours\"\n    else:\n        url = url +\"&period=1%20hours\"\n    method=\"GET\"\n    \n    auth = base64.encodestring('%s:%s' % (global_apikey,' ')).replace('\\n', '')\n    headers = {\n    #'header1' : 'header_value'\n   'Authorization':'Basic %s' % auth,\n   'Content-Type':'application/x-www-form-urlencoded',\n   'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36',\n   'Cache-Control': 'no-cache'\n    }\n\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=headers, cookies=None, verify=True, cert=None,\n                                        timeout=(600,600), use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    #r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n    \n    \n    try:\n        r_json=json.loads(r_text)\n    except:\n        raise Exception(\"Unable to load into a json format\")\n    \n    try:\n        r_json_threat = r_json[\"threat\"]\n        for item in r_json_threat:\n            data = json.dumps(item)\n            data = data.replace(\"\\\"host\\\":\",\"\\\"hostname\\\":\")\n            event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n            ew.write_event(event)\n    except:\n        helper.log_info(\"Unable to get threats from json output\")\n    \n    helper.log_info(\"Infoblox TIDE download completed\")\n    ", "sample_count": "435583", "description": "", "name": "infoblox_threat_intelligence_domains", "customized_options": [{"value": "IID", "name": "profile"}]}, {"use_external_validation": true, "sourcetype": "infoblox:ipam:network", "parameters": [{"type": "text", "label": "API URI Base", "help_string": "Base of API URI", "format_type": "text", "required": true, "value": "https://ddi-mgmt.se.infr.infoblox.com", "name": "api_uri_base", "default_value": "", "placeholder": "https://infoblox-grid-master.company.internal"}, {"type": "text", "label": "API version", "help_string": "Version of API being used", "format_type": "text", "required": true, "value": "v2.5", "name": "api_version", "default_value": "v2.5", "placeholder": ""}, {"type": "text", "label": "Username", "help_string": "", "format_type": "text", "required": false, "value": "nje", "name": "username", "default_value": "", "placeholder": "api-username"}, {"type": "password", "label": "Password", "help_string": "", "format_type": "password", "required": true, "value": "", "name": "password", "default_value": "", "placeholder": ""}], "interval": "3600", "index": "default", "title": "Infoblox Ipam Network", "streaming_mode_xml": true, "type": "customized", "uuid": "97c302c8f04d484a8ebadd22d6b7b52d", "data_inputs_options": [{"type": "customized_var", "placeholder": "https://infoblox-grid-master.company.internal", "required_on_edit": false, "format_type": "text", "description": "Base of API URI", "title": "API URI Base", "default_value": "", "required_on_create": true, "name": "api_uri_base"}, {"type": "customized_var", "placeholder": "", "required_on_edit": false, "format_type": "text", "description": "Version of API being used", "title": "API version", "default_value": "v2.5", "required_on_create": true, "name": "api_version"}, {"type": "customized_var", "placeholder": "api-username", "required_on_edit": false, "format_type": "text", "description": "", "title": "Username", "default_value": "", "required_on_create": false, "name": "username"}, {"type": "customized_var", "placeholder": "", "required_on_edit": false, "format_type": "password", "description": "", "title": "Password", "default_value": "", "required_on_create": true, "name": "password"}], "code": "\n# encoding = utf-8\n\nimport os\nimport json\nimport sys\nimport time\nimport datetime\nimport base64\nimport csv\nimport io\nfrom urlparse import urlparse\n\n\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # api_uri_base = definition.parameters.get('api_uri_base', None)\n    # api_version = definition.parameters.get('api_version', None)\n    # username = definition.parameters.get('username', None)\n    # password = definition.parameters.get('password', None)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\"\"\"\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_api_uri_base = helper.get_arg('api_uri_base')\n    opt_api_version = helper.get_arg('api_version')\n    opt_username = helper.get_arg('username')\n    opt_password = helper.get_arg('password')\n    \n    \n    \n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n   # helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    #account = helper.get_user_credential_by_username(\"username\")\n\n\n\n    \n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n\n    helper.log_info(\"Start download for Infoblox IPAM Networks\")\n    helper.log_info(\"uri base: \" + opt_api_uri_base)\n    helper.log_info(\"api version: \" + opt_api_version)\n    helper.log_info(\"username: \" + opt_username)\n\n\n\n    client_id = opt_username #opt_global_account['username']\n    secret = opt_password #opt_global_account['password'\n\n    auth = base64.encodestring('{0}:{1}'.format(client_id, secret)).replace('\\n', '')\n    \n    headers = {'Authorization': 'Basic ' + auth,'Content-Type': 'application/json'}\n    #userAndPass = b64encode(b\"opt_username:opt_password\").decode(\"ascii\")\n    #headers = { 'Authorization' : 'Basic %s' %  userAndPass }\n    #helper.log_info(\"headers: \" + headers)\n    \n    url = opt_api_uri_base + \"/wapi/\" + opt_api_version +\"/fileop?_function=csv_export\"\n    helper.log_info(\"url: \" + url)\n    method = \"POST\"\n    payload={\"_object\": \"network\"}\n\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=payload,\n                                        headers=headers, cookies=None, verify=False, cert=None,\n                                        timeout=300, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    \n    original_hostname=urlparse(url).hostname # prints www.website.com\n    \n    if r_status == 200:\n        helper.log_debug('Token received')\n        token = str(r_json['token'].replace('\\n', ''))\n        url = r_json['url']\n    response.raise_for_status()\n\n    # rewrite URL correctly based on paramters, not returned url\n    returned_hostname=urlparse(url).hostname # prints www.website.com\n    url=url.replace(returned_hostname,original_hostname)\n\n\n    method = \"GET\"\n    headers = {'Authorization': 'Basic ' + token, 'Content-Type': 'application/json'}\n    \n    response2 = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=headers, cookies=None, verify=False, cert=None,\n                                        timeout=300, use_proxy=True)    \n                                        \n    \n    r_text = response2.text\n    r_headers = response2.headers\n    r_status = response2.status_code\n    response.raise_for_status()\n    \n    #event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=r_text)\n    #ew.write_event(event)\n    \n    \n\n    reader_list = csv.DictReader(io.StringIO(r_text))\n\n    for row in reader_list:\n        try:\n            data = json.dumps(row)\n            data = data.replace(\"*\\\":\",\"\\\":\")\n        except:\n           helper.log_info(\"Unable to dump this row: \" + row)\n        event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data,unbroken=True)\n        ew.write_event(event)\n           \n", "sample_count": 0, "description": "", "name": "infoblox_ipam_network", "customized_options": [{"value": "https://ddi-mgmt.se.infr.infoblox.com", "name": "api_uri_base"}, {"value": "v2.5", "name": "api_version"}, {"value": "nje", "name": "username"}]}, {"use_external_validation": true, "sourcetype": "infoblox:threatintelligence:IPs", "parameters": [{"type": "dropdownlist", "label": "Profile", "help_string": "", "possible_values": [{"value": "IID", "label": "IID"}], "name": "profile", "required": true, "value": "IID", "format_type": "dropdownlist", "default_value": "IID", "placeholder": ""}], "interval": "3600", "index": "default", "title": "Infoblox threat intelligence IPs", "streaming_mode_xml": true, "type": "customized", "uuid": "dab1e2a18bcb4d38af43ec0dea9b8cef", "data_inputs_options": [{"title": "Profile", "type": "customized_var", "placeholder": "", "required_on_edit": false, "possible_values": [{"value": "IID", "label": "IID"}], "description": "", "format_type": "dropdownlist", "default_value": "IID", "required_on_create": true, "name": "profile"}], "code": "import os\nimport sys\nimport time\nimport datetime\nimport json\nimport base64\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # profile = definition.parameters.get('profile', None)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\n    \"\"\"\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_profile = helper.get_arg('profile')\n    interval = helper.get_arg('interval')\n    \n    helper.set_log_level(\"debug\")\n    helper.log_debug(\"Interval is \" + str(interval))\n    # In single instance mode, to get arguments of a particular input, use\n    # opt_profile = helper.get_arg('profile', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    #helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    # helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    # helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    # account = helper.get_user_credential_by_username(\"username\")\n    # account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_apikey = helper.get_global_setting(\"apikey\")\n\n    # The following examples show usage of logging related helper functions.\n    #helper.set_log_level(\"info\")\n    # write to the log for this modular input using configured global log level or INFO as default\n    # helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_info(\"Start download for Infoblox Threatlist\")\n\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    \n    \n    url = \"https://platform.activetrust.net:8000/api/data/threats/IP?data_format=json\"\n    \n    #if opt_profile and not opt_profile.isspace():\n    #    url = url + \"&profile=\" + opt_profile\n    if interval:\n        period = int(interval)/3600\n        url = url + \"&period=\" + str(period) + \"%20hours\"\n    else:\n        url = url +\"&period=1%20hours\"\n    method=\"GET\"\n    \n    auth = base64.encodestring('%s:%s' % (global_apikey,' ')).replace('\\n', '')\n    headers = {\n   'Authorization':'Basic %s' % auth,\n   'Content-Type':'application/x-www-form-urlencoded',\n   'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36',\n   'Cache-Control': 'no-cache'\n    }\n\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=headers, cookies=None, verify=True, cert=None,\n                                        timeout=(600,600), use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    #r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n    \n    \n    try:\n        r_json=json.loads(r_text)\n    except:\n        raise Exception(\"Unable to load into a json format\")\n    \n    try:\n        r_json_threat = r_json[\"threat\"]\n        for item in r_json_threat:\n            data = json.dumps(item)\n            event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n            ew.write_event(event)\n    except:\n        helper.log_info(\"Unable to get threats from json output\")\n    \n    helper.log_info(\"Infoblox TIDE download completed\")\n    ", "sample_count": "99332", "description": "", "name": "infoblox_threat_intelligence_ips", "customized_options": [{"value": "IID", "name": "profile"}]}, {"use_external_validation": true, "sourcetype": "infoblox:threatintelligence:URLs", "streaming_mode_xml": true, "interval": "3600", "index": "default", "title": "Infoblox threat intelligence URLs", "parameters": [{"type": "dropdownlist", "label": "Profile", "help_string": "", "possible_values": [{"value": "IID", "label": "IID"}], "required": true, "value": "IID", "format_type": "dropdownlist", "default_value": "IID", "placeholder": "", "name": "profile"}], "type": "customized", "uuid": "bb980f56ebb649c29bcd936322e98e26", "data_inputs_options": [{"type": "customized_var", "name": "profile", "placeholder": "", "required_on_edit": false, "possible_values": [{"value": "IID", "label": "IID"}], "description": "", "format_type": "dropdownlist", "default_value": "IID", "required_on_create": true, "title": "Profile"}], "code": "import os\nimport sys\nimport time\nimport datetime\nimport json\nimport base64\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # profile = definition.parameters.get('profile', None)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\n    \"\"\"\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_profile = helper.get_arg('profile')\n    interval = helper.get_arg('interval')\n    \n    helper.set_log_level(\"debug\")\n    helper.log_debug(\"Interval is \" + str(interval))\n    # In single instance mode, to get arguments of a particular input, use\n    # opt_profile = helper.get_arg('profile', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    #helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    # helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    # helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    # account = helper.get_user_credential_by_username(\"username\")\n    # account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_apikey = helper.get_global_setting(\"apikey\")\n\n    # The following examples show usage of logging related helper functions.\n    #helper.set_log_level(\"info\")\n    # write to the log for this modular input using configured global log level or INFO as default\n    # helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_info(\"Start download for Infoblox Threatlist\")\n\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    \n    \n    url = \"https://platform.activetrust.net:8000/api/data/threats/URL?data_format=json\"\n    \n    #if opt_profile and not opt_profile.isspace():\n    #    url = url + \"&profile=\" + opt_profile\n    if interval:\n        period = int(interval)/3600\n        url = url + \"&period=\" + str(period) + \"%20hours\"\n    else:\n        url = url +\"&period=1%20hours\"\n    method=\"GET\"\n    \n    auth = base64.encodestring('%s:%s' % (global_apikey,' ')).replace('\\n', '')\n    headers = {\n   'Authorization':'Basic %s' % auth,\n   'Content-Type':'application/x-www-form-urlencoded',\n   'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36',\n   'Cache-Control': 'no-cache'\n    }\n\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=headers, cookies=None, verify=True, cert=None,\n                                        timeout=(600,600), use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    #r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n    \n    \n    try:\n        r_json=json.loads(r_text)\n    except:\n        raise Exception(\"Unable to load into a json format\")\n    \n    try:\n        r_json_threat = r_json[\"threat\"]\n        for item in r_json_threat:\n            data = json.dumps(item)\n            data = data.replace(\"\\\"host\\\":\",\"\\\"hostname\\\":\")\n            event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n            ew.write_event(event)\n    except:\n        helper.log_info(\"Unable to get threats from json output\")\n    \n    helper.log_info(\"Infoblox TIDE download completed\")\n    ", "sample_count": "9429", "description": "", "name": "infoblox_threat_intelligence_urls", "customized_options": [{"value": "IID", "name": "profile"}]}]}, "field_extraction_builder": {"infoblox:threatintelligence:domains": {"data_format": "json", "is_parsed": true}, "infoblox_threat_intelligence_URLs": {"data_format": "json", "is_parsed": true}, "infoblox:threatintelligence:IPs": {"data_format": "json", "is_parsed": true}, "infoblox-ipam-network:csv": {"data_format": "json", "is_parsed": true}, "infoblox:threatintelligence:URLs": {"data_format": "json", "is_parsed": true}, "infoblox_threat_intelligence_IPs": {"data_format": "json", "is_parsed": true}, "infoblox_threat_intelligence_domains": {"data_format": "json", "is_parsed": true}, "infoblox:ipam:network": {"data_format": "json", "is_parsed": true}}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "proxy_settings": {"proxy_type": "http"}, "customized_settings": [{"type": "password", "label": "TIDE API Key", "help_string": "API key is available on platform.activetrust.com", "format_type": "password", "required": true, "value": "", "name": "apikey", "default_value": "", "placeholder": ""}]}}, "sourcetype_builder": {"infoblox:threatintelligence:domains": {"metadata": {"data_input_name": "infoblox_threat_intelligence_domains", "extractions_count": 0, "cims_count": 0, "event_count": 0}}, "infoblox:threatintelligence:IPs": {"metadata": {"data_input_name": "infoblox_threat_intelligence_ips", "extractions_count": 0, "cims_count": 0, "event_count": 0}}, "infoblox:threatintelligence:URLs": {"metadata": {"data_input_name": "infoblox_threat_intelligence_urls", "extractions_count": 0, "cims_count": 0, "event_count": 0}}, "infoblox:ipam:network": {"metadata": {"data_input_name": "infoblox_ipam_network", "extractions_count": 0, "cims_count": 0, "event_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "validation_id": "v_1556015633_55", "progress": 1.0, "status": "job_finished"}, "basic_builder": {"large_icon": "", "tab_build_no": "12", "version": "1.0.4", "visible": true, "appname": "TA-infoblox-intelligence", "theme": "#3c444d", "tab_version": "2.2.0", "friendly_name": "Infoblox Intelligence", "build_no": 13, "description": "Acquire Infoblox threat intelligence & network intelligence from IPAM", "author": "Nicolas Jeanselme", "small_icon": "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"}}